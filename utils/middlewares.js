const jwt = require('jsonwebtoken');
const { JWT_SECRET } = require('./config');
const prisma = require('../prisma/prisma');
const redis = require('./redisClient');

const extractUser = async (req, res, next) => {
  const authHeader = req.headers.authorization;
  if (!authHeader)
    return res.status(401).json({ message: 'No token provided' });
  const token = authHeader.split(' ')[1];
  console.log('token is ', token);
  if (!token) {
    return res.status(401).json({ message: 'Invalid token format' });
  }

  try {
    const userInfo = jwt.verify(token, JWT_SECRET);
    const user = await prisma.user.findUnique({ where: { id: userInfo.id } });
    if (!user) {
      return res.status(400).json({ error: 'User not found. Signup' });
    }
    req.user = user;
    console.log('Request generated by', user);
    next();
  } catch (err) {
    console.log(err.message);
    if (err.name == 'TokenExpiredError') {
      return res.status(401).json({ message: 'Token Expired' });
    }
    return res.status(401).json({ message: 'Invalid token' });
  }
};
/**
 * @params WS Number Window size in seconds
 * @param AUTH_LIMIT Number number of request allowed
 * @param THROTTLE_DELAY Number of seconds in throttle seconds
 * @param THROTTLE_LIMIT
 */

const authLimit =
  (WS, AUTH_LIMIT, THROTTLE_DELAY, THROTTLE_LIMIT) =>
  async (req, res, next) => {
    const currentTime = Date.now();
    try {
      const key = req.user.id;
      const rqs = await redis.lrange(key, 0, -1);
      const allowed = rqs.filter((t) => t >= currentTime - WS);
      if (allowed.length > AUTH_LIMIT) {
        return res.status(429).json({ error: 'Too many requests' });
      }
      if (allowed.length > THROTTLE_LIMIT) {
        await new Promise((res) => setTimeout(res, THROTTLE_DELAY));
      }
      await redis
        .multi()
        .lpush(key, currentTime)
        .expire(key, W / 1000)
        .exec();
      next();
    } catch (error) {
      return res.status(500).json({ error: error.message });
    }
  };

const rateLimit =
  (WS, RATE_LIMIT, THROTTLE_DELAY, THROTTLE_LIMIT) =>
  async (req, res, next) => {
    const currentTime = Date.now();
    try {
      const key = req.user.id;
      const rqs = await redis.lrange(key, 0, -1);
      const allowed = rqs.filter((t) => t >= currentTime - WS);
      if (allowed.length > RATE_LIMIT) {
        return res
          .status(429)
          .json({ error: 'Too many  attempts to authenticate' });
      }
      if (allowed.length > THROTTLE_LIMIT) {
        await new Promise((res, rej) => setTimeout(res, THROTTLE_DELAY));
      }
      await redis
        .multi()
        .lpush(key, currentTime)
        .expire(key, W / 1000)
        .exec();
      next();
    } catch (error) {
      return res.status(500).json({ error: error.message });
    }
  };

module.exports = { extractUser, rateLimit, authLimit };
